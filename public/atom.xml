<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yet Another Open Source Blog by Badacadabra | Baptiste Vannesson</title>
  <subtitle>FLOSS enthusiast</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://badacadabra.github.io/"/>
  <updated>2017-06-09T17:28:00.392Z</updated>
  <id>https://badacadabra.github.io/</id>
  
  <author>
    <name>Baptiste Vannesson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>What if JavaScript was a Java scripting language?</title>
    <link href="https://badacadabra.github.io/What-if-JavaScript-was-a-Java-scripting-language/"/>
    <id>https://badacadabra.github.io/What-if-JavaScript-was-a-Java-scripting-language/</id>
    <published>2017-06-08T21:51:28.000Z</published>
    <updated>2017-06-09T17:28:00.392Z</updated>
    
    <content type="html"><![CDATA[<p><em>Meanwhile, in a parallel universe…</em></p>
<p>JavaScript is a scripting language for the Java Platform and JS scripts should strictly apply the key concepts of <strong>object-oriented programming</strong> (OOP).</p>
<p>Our task is to model and implement a simple program that involves living beings. This is of course a vast topic and, for the sake of simplicity, we will not deal with peripheral concepts like generics, synchronized methods, collections or packages. This would bring us too far.</p>
<a id="more"></a>
<hr>
<h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p>Java is a class-based language where inheritance is performed using the <code>extends</code> keyword. This is much more complicated in JavaScript…</p>
<h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><p>ECMAScript 5 does not have built-in classes. JavaScript is a <strong>prototype-based language</strong>, but classes can be emulated thanks to <strong>constructor functions</strong>. Inheritance is possible, but should be done through a manipulation of prototypes:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Parent class</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LivingBeing</span>(<span class="params">species</span>) </span>&#123; <span class="comment">// constructor</span></div><div class="line">  <span class="keyword">this</span>.species = species; <span class="comment">// attribute</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">LivingBeing.live = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// static method</span></div><div class="line">  <span class="keyword">return</span> <span class="string">'Life is life!'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Child class</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstname, lastname</span>) </span>&#123; <span class="comment">// constructor</span></div><div class="line">  LivingBeing.call(<span class="keyword">this</span>, <span class="string">'Homo sapiens'</span>); <span class="comment">// super("Homo sapiens")</span></div><div class="line">  <span class="keyword">this</span>.firstname = firstname; <span class="comment">// attribute</span></div><div class="line">  <span class="keyword">this</span>.lastname = lastname; <span class="comment">// attribute</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// extends</span></div><div class="line">Person.prototype = <span class="built_in">Object</span>.create(LivingBeing.prototype);</div><div class="line">Person.prototype.constructor = Person;</div><div class="line"></div><div class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// instance method</span></div><div class="line">  <span class="keyword">return</span> <span class="string">'Hello, '</span> + <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastname + <span class="string">'!'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// --------------------</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> anonymousDog = <span class="keyword">new</span> LivingBeing(<span class="string">'Canis lupus'</span>);</div><div class="line"><span class="built_in">console</span>.log(anonymousDog.species); <span class="comment">// Canis lupus</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello(), <span class="string">'('</span> + john.species + <span class="string">')'</span>); <span class="comment">// Hello, John Doe! (Homo sapiens)</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(LivingBeing.live()); <span class="comment">// Life is life!</span></div></pre></td></tr></table></figure>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>ECMAScript 6 brought syntactic sugar to work more easily with so-called classes and inheritance. This new syntax hides the true prototypal nature of JavaScript, but now the language looks much more familiar for Java developers:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Parent class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LivingBeing</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(species) &#123;</div><div class="line">    <span class="keyword">this</span>.species = species; <span class="comment">// attribute</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> live() &#123; <span class="comment">// static method</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Life is life!'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Child class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">LivingBeing</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(firstname, lastname) &#123;</div><div class="line">    <span class="keyword">super</span>(<span class="string">'Homo sapiens'</span>);</div><div class="line">    <span class="keyword">this</span>.firstname = firstname; <span class="comment">// attribute</span></div><div class="line">    <span class="keyword">this</span>.lastname = lastname; <span class="comment">// attribute</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayHello() &#123; <span class="comment">// instance method</span></div><div class="line">    <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;<span class="keyword">this</span>.firstname&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastname&#125;</span>!`</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// --------------------</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> anonymousDog = <span class="keyword">new</span> LivingBeing(<span class="string">'Canis lupus'</span>);</div><div class="line"><span class="built_in">console</span>.log(anonymousDog.species); <span class="comment">// Canis lupus</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello(), <span class="string">`(<span class="subst">$&#123;john.species&#125;</span>)`</span>); <span class="comment">// Hello, John Doe! (Homo sapiens)</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(LivingBeing.live()); <span class="comment">// Life is life!</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h2><p>In OOP, a best practice is to favor <strong>composition over inheritance</strong>.</p>
<h3 id="ES5-1"><a href="#ES5-1" class="headerlink" title="ES5"></a>ES5</h3><p>Composition in ECMAScript 5 is not so different from composition in Java. A specific class may reference another class using an instance of the latter in one of its properties.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Class to be referenced</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LivingBeing</span>(<span class="params">species</span>) </span>&#123; <span class="comment">// constructor</span></div><div class="line">  <span class="keyword">this</span>.species = species; <span class="comment">// attribute</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">LivingBeing.live = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// static method</span></div><div class="line">  <span class="keyword">return</span> <span class="string">'Life is life!'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Main class</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstname, lastname</span>) </span>&#123; <span class="comment">// constructor</span></div><div class="line">  <span class="keyword">this</span>.livingBeing = <span class="keyword">new</span> LivingBeing(<span class="string">'Homo sapiens'</span>); <span class="comment">// attribute (composition)</span></div><div class="line">  <span class="keyword">this</span>.firstname = firstname; <span class="comment">// attribute</span></div><div class="line">  <span class="keyword">this</span>.lastname = lastname; <span class="comment">// attribute</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// instance method</span></div><div class="line">  <span class="keyword">return</span> <span class="string">'Hello, '</span> + <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastname + <span class="string">'!'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// --------------------</span></div><div class="line"></div><div class="line"><span class="keyword">var</span>  anonymousDog = <span class="keyword">new</span> LivingBeing(<span class="string">'Canis lupus'</span>);</div><div class="line"><span class="built_in">console</span>.log(anonymousDog.species);</div><div class="line"></div><div class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello(), <span class="string">'('</span> + john.livingBeing.species + <span class="string">')'</span>); <span class="comment">// Hello, John Doe! (Homo sapiens)</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(LivingBeing.live()); <span class="comment">// Life is life!</span></div></pre></td></tr></table></figure>
<h3 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h3><p>Composition in ECMAScript 6 is even closer to Java, thanks to the syntactic sugar that emulates classes natively:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Class to be referenced</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LivingBeing</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(species) &#123;</div><div class="line">    <span class="keyword">this</span>.species = species; <span class="comment">// attribute</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> live() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Life is life!'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Main class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(firstname, lastname) &#123;</div><div class="line">    <span class="keyword">this</span>.livingBeing = <span class="keyword">new</span> LivingBeing(<span class="string">'Homo sapiens'</span>); <span class="comment">// attribute (composition)</span></div><div class="line">    <span class="keyword">this</span>.firstname = firstname; <span class="comment">// attribute</span></div><div class="line">    <span class="keyword">this</span>.lastname = lastname; <span class="comment">// attribute</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayHello() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;<span class="keyword">this</span>.firstname&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastname&#125;</span>!`</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// --------------------</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> anonymousDog = <span class="keyword">new</span> LivingBeing(<span class="string">'Canis lupus'</span>);</div><div class="line"><span class="built_in">console</span>.log(anonymousDog.species);</div><div class="line"></div><div class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello(), <span class="string">`(<span class="subst">$&#123;john.livingBeing.species&#125;</span>)`</span>); <span class="comment">// Hello, John Doe (Homo sapiens)</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(LivingBeing.live()); <span class="comment">// Life is life!</span></div></pre></td></tr></table></figure>
<p>Composition works fine here, but conceptually, inheritance is more meaningful for this particular problem.</p>
<hr>
<h2 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h2><p>Abstraction in Java is based on <strong>abstract classes</strong> and <strong>interfaces</strong>. JavaScript does not have a built-in abstraction mechanism, but like classes in ES5, this concept can be emulated.</p>
<h3 id="Abstract-class"><a href="#Abstract-class" class="headerlink" title="Abstract class"></a>Abstract class</h3><p>An abstract class is a class that cannot be instantiated, so we cannot create direct objects from an abstract class. In JavaScript, we can prevent instantiation of a particular class using conditions in the constructor.</p>
<p>An abstract class can contain abstract methods which are methods without implementation. In JavaScript, this can be reproduced quite easily if we declare a prototype method that only throws an error. It will remain “abstract” (it will throw an error) as long as it is not redefined in the prototype chain.</p>
<h4 id="ES5-2"><a href="#ES5-2" class="headerlink" title="ES5"></a>ES5</h4><p>To create an abstract class in ES5 (here <code>LivingBeing</code>), the best test to check if the constructor has been called directly with <code>new</code> is <code>this.constructor === LivingBeing</code>. Be careful to use the right comparison operator because <code>this.constructor !== LivingBeing</code> would create (roughly) a <strong>final class</strong> (a class that cannot be extended)!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Abstract class</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LivingBeing</span>(<span class="params">species</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.constructor === LivingBeing) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'You cannot instantiate an abstract class!'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.species = species;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LivingBeing.prototype.communicate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// abstract method</span></div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'You cannot call an abstract method!'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Concrete class</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstname, lastname</span>) </span>&#123;</div><div class="line">  LivingBeing.call(<span class="keyword">this</span>, <span class="string">'Homo sapiens'</span>);</div><div class="line">  <span class="keyword">this</span>.firstname = firstname;</div><div class="line">  <span class="keyword">this</span>.lastname = lastname;</div><div class="line">&#125;</div><div class="line">Person.prototype = <span class="built_in">Object</span>.create(LivingBeing.prototype);</div><div class="line">Person.prototype.constructor = Person;</div><div class="line"></div><div class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// concrete method</span></div><div class="line">  <span class="keyword">return</span> <span class="string">'Hello, '</span> + <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastname + <span class="string">'!'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// --------------------</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello(), <span class="string">'('</span> + john.species + <span class="string">')'</span>); <span class="comment">// Hello, John Doe! (Homo sapiens)</span></div><div class="line"></div><div class="line">john.communicate(); <span class="comment">// Error: Your cannot call an abstract method!</span></div><div class="line"><span class="keyword">new</span> LivingBeing(<span class="string">'Canis lupus'</span>); <span class="comment">// Error: You cannot instantiate an abstract class!</span></div></pre></td></tr></table></figure>
<h4 id="ES6-2"><a href="#ES6-2" class="headerlink" title="ES6"></a>ES6</h4><p>With ES6, it is better to use <code>new.target</code> like this: <code>new.target.name === &#39;LivingBeing&#39;</code>. Once again, be careful with the comparison operator: <code>new.target.name !== &#39;LivingBeing&#39;</code> would create a final class.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Abstract class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LivingBeing</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(species) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">new</span>.target.name === <span class="string">'LivingBeing'</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'You cannot instantiate an abstract class!'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.species = species;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  communicate() &#123; <span class="comment">// abstract method</span></div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'You cannot call an abstract method!'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Concrete class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">LivingBeing</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(firstname, lastname) &#123;</div><div class="line">    <span class="keyword">super</span>(<span class="string">'Homo sapiens'</span>);</div><div class="line">    <span class="keyword">this</span>.firstname = firstname;</div><div class="line">    <span class="keyword">this</span>.lastname = lastname;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayHello() &#123; <span class="comment">// concrete method</span></div><div class="line">    <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;<span class="keyword">this</span>.firstname&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastname&#125;</span>`</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// --------------------</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello(), <span class="string">`(<span class="subst">$&#123;john.species&#125;</span>)`</span>); <span class="comment">// Hello, John Doe! (Homo sapiens)</span></div><div class="line"></div><div class="line">john.communicate(); <span class="comment">// Error: You cannot call an abstract method!</span></div><div class="line"><span class="keyword">new</span> LivingBeing(<span class="string">'Canis lupus'</span>); <span class="comment">// Error: You cannot instantiate an abstract class!</span></div></pre></td></tr></table></figure>
<h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p>Interfaces in Java are quite close to 100% abstract classes. They contain <code>public abstract</code> methods that must be overriden in classes which implement them.</p>
<h4 id="ES5-3"><a href="#ES5-3" class="headerlink" title="ES5"></a>ES5</h4><p>A solution to get interfaces in ES5 is to create a custom <code>implements</code> function in <code>Function.prototype</code> and use object literals to declare interfaces.</p>
<p>The custom function must traverse the <strong>own properties</strong> of the interface passed as an argument and test if they exist in the current function instance (presumably a constructor function). If they do not exist, they should be created in the function’s prototype. In this case, they remain abstract, meaning that they will throw an error if we try to use them before to override them.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Custom "implements" function</span></div><div class="line"><span class="built_in">Function</span>.prototype.implements = <span class="function"><span class="keyword">function</span> (<span class="params">iface</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (iface.toString() !== <span class="string">'[object Object]'</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid argument. An interface must be an object.'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> iface) &#123;</div><div class="line">      <span class="keyword">if</span> (iface.hasOwnProperty(prop)) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> iface[prop] === <span class="string">'function'</span> &amp;&amp; !(prop <span class="keyword">in</span> <span class="keyword">this</span>)) &#123;</div><div class="line">          <span class="keyword">this</span>.prototype[prop] = iface[prop];</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Interface</span></div><div class="line"><span class="keyword">var</span> LivingBeingInterface = &#123;</div><div class="line">  <span class="attr">communicate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'You cannot call an abstract method!'</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">getSpecies</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'You cannot call an abstract method!'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Class</span></div><div class="line">Person.implements(LivingBeingInterface); <span class="comment">// cool, isn't it?</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstname, lastname</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.firstname = firstname;</div><div class="line">  <span class="keyword">this</span>.lastname = lastname;</div><div class="line">  <span class="keyword">this</span>.species = <span class="string">'Homo sapiens'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'Hello, '</span> + <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastname + <span class="string">'!'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Person.prototype.communicate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// overrides the default implementation</span></div><div class="line">  <span class="keyword">return</span> <span class="string">'blah blah blah'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Person.prototype.getSpecies() is not overriden</span></div><div class="line"></div><div class="line"><span class="comment">// --------------------</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello()); <span class="comment">// Hello, John Doe!</span></div><div class="line"><span class="built_in">console</span>.log(john.communicate()); <span class="comment">// blah blah blah</span></div><div class="line"><span class="built_in">console</span>.log(john.getSpecies()); <span class="comment">// Error: You cannot call an abstract method!</span></div></pre></td></tr></table></figure>
<h4 id="ES6-3"><a href="#ES6-3" class="headerlink" title="ES6"></a>ES6</h4><p>ES6 classes are like coherent blocks of methods and they are not hoisted. Thus, contrary to ES5, we must call our <code>implements</code> method after the class declaration.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Custom "implements" function</span></div><div class="line"><span class="built_in">Function</span>.prototype.implements = <span class="function"><span class="keyword">function</span> (<span class="params">iface</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (iface.toString() !== <span class="string">'[object Object]'</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid argument. An interface must be an object.'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> iface) &#123;</div><div class="line">      <span class="keyword">if</span> (iface.hasOwnProperty(prop)) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> iface[prop] === <span class="string">'function'</span> &amp;&amp; !(prop <span class="keyword">in</span> <span class="keyword">this</span>.prototype)) &#123;</div><div class="line">          <span class="keyword">this</span>.prototype[prop] = iface[prop];</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Interface</span></div><div class="line"><span class="keyword">const</span> LivingBeingInterface = &#123;</div><div class="line">  communicate() &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'You cannot call an abstract method!'</span>);</div><div class="line">  &#125;,</div><div class="line">  getSpecies() &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'You cannot call an abstract method!'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span> (firstname, lastname) &#123;</div><div class="line">    <span class="keyword">this</span>.firstname = firstname;</div><div class="line">    <span class="keyword">this</span>.lastname = lastname;</div><div class="line">    <span class="keyword">this</span>.species = <span class="string">'Homo sapiens'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayHello() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;<span class="keyword">this</span>.firstname&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastname&#125;</span>!`</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  communicate() &#123; <span class="comment">// overrides the default implementation</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'blah blah blah'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Person.prototype.getSpecies() is not overriden</span></div><div class="line">&#125;</div><div class="line">Person.implements(LivingBeingInterface); <span class="comment">// cool, isn't it?</span></div><div class="line"></div><div class="line"><span class="comment">// --------------------</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello()); <span class="comment">// Hello, John Doe!</span></div><div class="line"><span class="built_in">console</span>.log(john.communicate()); <span class="comment">// blah blah blah</span></div><div class="line"><span class="built_in">console</span>.log(john.getSpecies()); <span class="comment">// Error: You cannot call an abstract method!</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h2><p>As you may know, Java is strongly typed. On the contrary, JavaScript is loosely typed. But, in Java, if you create an instance of <code>Person</code> that extends <code>LivingBeing</code>, this instance is of type <code>Person</code> <strong>and</strong> <code>LivingBeing</code>. So if you iterate through a collection of <code>LivingBeing</code> objects containing people, animals or plants, and call the same method on each object, you will have specific results for each living being thanks to a <strong>dynamic binding</strong>. JavaScript works this way too if we use the <strong>prototype chain</strong> properly.</p>
<h3 id="ES5-4"><a href="#ES5-4" class="headerlink" title="ES5"></a>ES5</h3><p>As an example, we could override the original <code>Object.prototype.toString()</code> method for people and dogs.</p>
<p>In JavaScript, classes and their instances are objects. By default, when we call <code>toString()</code> on an object, we get <code>[object Object]</code>. <code>Person</code> or <code>Dog</code> instances are also indirect instances of <code>LivingBeing</code>, so we could define several <code>toString()</code> methods in the prototype chain.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LivingBeing</span>(<span class="params">species</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.constructor === LivingBeing) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'You cannot instantiate an abstract class!'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.species = species;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Overrides Object.prototype.toString()</span></div><div class="line">LivingBeing.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// returns the species instead of [object Object]</span></div><div class="line">  <span class="keyword">return</span> <span class="string">'Species: '</span> + <span class="keyword">this</span>.species;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstname, lastname</span>) </span>&#123;</div><div class="line">  LivingBeing.call(<span class="keyword">this</span>, <span class="string">'Homo sapiens'</span>);</div><div class="line">  <span class="keyword">this</span>.firstname = firstname;</div><div class="line">  <span class="keyword">this</span>.lastname = lastname;</div><div class="line">&#125;</div><div class="line">Person.prototype = <span class="built_in">Object</span>.create(LivingBeing.prototype);</div><div class="line">Person.prototype.constructor = Person;</div><div class="line"></div><div class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'Hello, '</span> + <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastname + <span class="string">'!'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Overrides LivingBeing.prototype.toString()</span></div><div class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">'\n'</span>;</div><div class="line">  str += <span class="string">'First name: '</span> + <span class="keyword">this</span>.firstname + <span class="string">'\n'</span>;</div><div class="line">  str += <span class="string">'Last name: '</span> + <span class="keyword">this</span>.lastname + <span class="string">'\n'</span>;</div><div class="line">  str += LivingBeing.prototype.toString.call(<span class="keyword">this</span>); <span class="comment">// super.toString()</span></div><div class="line">  <span class="keyword">return</span> str; <span class="comment">// returns a summary instead of the species</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  LivingBeing.call(<span class="keyword">this</span>, <span class="string">'Canis lupus'</span>);</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Overrides LivingBeing.prototype.toString()</span></div><div class="line">Dog.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">'\n'</span>;</div><div class="line">  str += <span class="string">'Name: '</span> + <span class="keyword">this</span>.name + <span class="string">'\n'</span>;</div><div class="line">  str += LivingBeing.prototype.toString.call(<span class="keyword">this</span>);</div><div class="line">  <span class="keyword">return</span> str; <span class="comment">// returns a summary instead of the species</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// --------------------</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello(), <span class="string">'('</span> + john.species + <span class="string">')'</span>); <span class="comment">// Hello, John Doe! (Homo sapiens)</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> fido = <span class="keyword">new</span> Dog(<span class="string">'Fido'</span>);</div><div class="line"><span class="built_in">console</span>.log(fido.name, <span class="string">'('</span> + fido.species + <span class="string">')'</span>); <span class="comment">// Fido (Canis lupus)</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> livingBeings = [john, fido];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; livingBeings.length; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(livingBeings[i].toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// First name: John</span></div><div class="line"><span class="comment">// Last name: Doe</span></div><div class="line"><span class="comment">// Species: Homo sapiens</span></div><div class="line"></div><div class="line"><span class="comment">// Name: Fido</span></div><div class="line"><span class="comment">// Species: Canis lupus</span></div></pre></td></tr></table></figure>
<h3 id="ES6-4"><a href="#ES6-4" class="headerlink" title="ES6"></a>ES6</h3><p>It is not so different with ES6, except that we can use classes, string interpolation and a <code>for...of</code> loop for convenience:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LivingBeing</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(species) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">new</span>.target.name === <span class="string">'LivingBeing'</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'You cannot instantiate an abstract class!'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.species = species;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123; <span class="comment">// overrides Object.prototype.toString()</span></div><div class="line">    <span class="comment">// returns the species instead of [object Object]</span></div><div class="line">    <span class="keyword">return</span> <span class="string">`Species: <span class="subst">$&#123;<span class="keyword">this</span>.species&#125;</span>`</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">LivingBeing</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(firstname, lastname) &#123;</div><div class="line">    <span class="keyword">super</span>(<span class="string">'Homo sapiens'</span>);</div><div class="line">    <span class="keyword">this</span>.firstname = firstname;</div><div class="line">    <span class="keyword">this</span>.lastname = lastname;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayHello() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;<span class="keyword">this</span>.firstname&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastname&#125;</span>!`</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123; <span class="comment">// overrides LivingBeing.prototype.toString()</span></div><div class="line">    <span class="keyword">return</span> <span class="string">`</span></div><div class="line">First name: <span class="subst">$&#123;<span class="keyword">this</span>.firstname&#125;</span></div><div class="line">Last name: <span class="subst">$&#123;<span class="keyword">this</span>.lastname&#125;</span></div><div class="line"><span class="subst">$&#123;<span class="keyword">super</span>.toString()&#125;</span>`; <span class="comment">// returns a summary instead of the species</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">LivingBeing</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name) &#123;</div><div class="line">    <span class="keyword">super</span>(<span class="string">'Canis lupus'</span>);</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123; <span class="comment">// overrides LivingBeing.prototype.toString()</span></div><div class="line">    <span class="keyword">return</span> <span class="string">`</span></div><div class="line">Name: <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span></div><div class="line"><span class="subst">$&#123;<span class="keyword">super</span>.toString()&#125;</span>`; <span class="comment">// returns a summary instead of the species</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// --------------------</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello(), <span class="string">`(<span class="subst">$&#123;john.species&#125;</span>)`</span>); <span class="comment">// Hello, John Doe! (Homo sapiens)</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> fido = <span class="keyword">new</span> Dog(<span class="string">'Fido'</span>);</div><div class="line"><span class="built_in">console</span>.log(fido.name, <span class="string">`(<span class="subst">$&#123;fido.species&#125;</span>)`</span>); <span class="comment">// Fido (Canis lupus)</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> livingBeings = [john, fido];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">const</span> being <span class="keyword">of</span> livingBeings) &#123;</div><div class="line">  <span class="built_in">console</span>.log(being.toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// First name: John</span></div><div class="line"><span class="comment">// Last name: Doe</span></div><div class="line"><span class="comment">// Species: Homo sapiens</span></div><div class="line"></div><div class="line"><span class="comment">// Name: Fido</span></div><div class="line"><span class="comment">// Species: Canis lupus</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h2><p>Encapsulation makes it possible to restrict the access to class members through <strong>access level modifiers</strong> and <strong>getters/setters</strong>.</p>
<h3 id="Access-level-modifiers"><a href="#Access-level-modifiers" class="headerlink" title="Access level modifiers"></a>Access level modifiers</h3><p>Java provides useful keywords like <code>public</code>, <code>protected</code> or <code>private</code> to modify access level of class attributes and methods. Unfortunately, JavaScript does not have these access modifiers (they are reserved words but are still unused).</p>
<h4 id="ES5-5"><a href="#ES5-5" class="headerlink" title="ES5"></a>ES5</h4><p>To reproduce the effect of <code>public</code>, <code>protected</code> or <code>private</code>, we have to play with the <strong>scope chain</strong>, <strong>closures</strong> and <strong>IIFEs</strong> (Immediately-Invoked Function Expressions).</p>
<ul>
<li>A <strong>public</strong> member is basically a prototype property.</li>
<li>A <strong>protected</strong> member is a simple variable or function declared inside a surrounding function and that can be accessed from <code>LivingBeing</code> and <code>Person</code>.</li>
<li>A <strong>private</strong> member is a simple variable or function declared inside a nested function and that can be accessed from <code>Person</code> only.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// public class</span></div><div class="line">  <span class="keyword">var</span> species = <span class="string">''</span>; <span class="comment">// protected attribute</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">LivingBeing</span>(<span class="params">s</span>) </span>&#123; <span class="comment">// protected inner class</span></div><div class="line">    species = s;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> firstname = <span class="string">''</span>, <span class="comment">// private attribute</span></div><div class="line">        lastname = <span class="string">''</span>; <span class="comment">// private attribute</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last</span>) </span>&#123; <span class="comment">// private inner class</span></div><div class="line">      LivingBeing.call(<span class="keyword">this</span>, <span class="string">'Homo sapiens'</span>);</div><div class="line">      firstname = first;</div><div class="line">      lastname = last;</div><div class="line">    &#125;</div><div class="line">    Person.prototype = <span class="built_in">Object</span>.create(LivingBeing.prototype);</div><div class="line">    Person.prototype.constructor = Person;</div><div class="line"></div><div class="line">    Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// public method</span></div><div class="line">      <span class="keyword">return</span> <span class="string">'Hello, '</span> + firstname + <span class="string">' '</span> + lastname + <span class="string">'! ('</span> + species + <span class="string">')'</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Person;</div><div class="line">  &#125;)();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Person;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// --------------------</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello()); <span class="comment">// Hello, John Doe! (Homo sapiens)</span></div><div class="line"><span class="built_in">console</span>.log(john.firstname, john.lastname, john.species); <span class="comment">// undefined undefined undefined</span></div></pre></td></tr></table></figure>
<h4 id="ES6-5"><a href="#ES6-5" class="headerlink" title="ES6"></a>ES6</h4><p>It may be surprising, but ES6 classes do not even have access level modifiers. Here we can use arrow functions for convenience:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> Person = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123; <span class="comment">// public class</span></div><div class="line">  <span class="keyword">let</span> species = <span class="string">''</span>; <span class="comment">// protected attribute</span></div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">LivingBeing</span> </span>&#123; <span class="comment">// protected inner class</span></div><div class="line">    <span class="keyword">constructor</span>(s) &#123;</div><div class="line">      species = s;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> Person = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> firstname = <span class="string">''</span>, <span class="comment">// private attribute</span></div><div class="line">        lastname = <span class="string">''</span>; <span class="comment">// private attribute</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">LivingBeing</span> </span>&#123; <span class="comment">// private inner class</span></div><div class="line">      <span class="keyword">constructor</span> (first, last) &#123;</div><div class="line">        <span class="keyword">super</span>(<span class="string">'Homo sapiens'</span>);</div><div class="line">        firstname = first;</div><div class="line">        lastname = last;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      sayHello() &#123; <span class="comment">// public method</span></div><div class="line">        <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;firstname&#125;</span> <span class="subst">$&#123;lastname&#125;</span>! (<span class="subst">$&#123;species&#125;</span>)`</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Person;</div><div class="line">  &#125;)();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Person;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// --------------------</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello()); <span class="comment">// Hello, John Doe! (Homo sapiens)</span></div><div class="line"><span class="built_in">console</span>.log(john.firstname, john.lastname, john.species); <span class="comment">// undefined undefined undefined</span></div></pre></td></tr></table></figure>
<h3 id="Getters-Setters"><a href="#Getters-Setters" class="headerlink" title="Getters/Setters"></a>Getters/Setters</h3><p>When some fields are private or protected, they cannot be accessed from the outside. To read them or modify them, we need public methods: <strong>getters</strong> and <strong>setters</strong>.</p>
<h4 id="ES5-6"><a href="#ES5-6" class="headerlink" title="ES5"></a>ES5</h4><p>Getters and setters can be defined with the old (now deprecated) <code>__defineGetter__</code> or <code>__defineSetter__</code> respectively, but this is much better to create a regular function with <code>get</code> or <code>set</code> in the name.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// public class</span></div><div class="line">  <span class="keyword">var</span> species = <span class="string">''</span>; <span class="comment">// protected attribute</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">LivingBeing</span>(<span class="params">s</span>) </span>&#123; <span class="comment">// protected inner class</span></div><div class="line">    species = s;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  LivingBeing.prototype.getSpecies = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// public getter</span></div><div class="line">    <span class="keyword">return</span> species;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  LivingBeing.prototype.setSpecies = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123; <span class="comment">// public setter</span></div><div class="line">    species = s;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> firstname = <span class="string">''</span>, <span class="comment">// private attribute</span></div><div class="line">        lastname = <span class="string">''</span>; <span class="comment">// private attribute</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last</span>) </span>&#123; <span class="comment">// private inner class</span></div><div class="line">      LivingBeing.call(<span class="keyword">this</span>, <span class="string">'Homo sapiens'</span>);</div><div class="line">      firstname = first;</div><div class="line">      lastname = last;</div><div class="line">    &#125;</div><div class="line">    Person.prototype = <span class="built_in">Object</span>.create(LivingBeing.prototype);</div><div class="line">    Person.prototype.constructor = Person;</div><div class="line"></div><div class="line">    Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// public method</span></div><div class="line">      <span class="keyword">return</span> <span class="string">'Hello, '</span> + firstname + <span class="string">' '</span> + lastname + <span class="string">'! ('</span> + species + <span class="string">')'</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    Person.prototype.getFirstname = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// public getter</span></div><div class="line">      <span class="keyword">return</span> firstname;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    Person.prototype.setFirstname = <span class="function"><span class="keyword">function</span> (<span class="params">first</span>) </span>&#123; <span class="comment">// public setter</span></div><div class="line">      firstname = first;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    Person.prototype.getLastname = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// public getter</span></div><div class="line">      <span class="keyword">return</span> lastname;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    Person.prototype.setLastname = <span class="function"><span class="keyword">function</span> (<span class="params">last</span>) </span>&#123; <span class="comment">// public setter</span></div><div class="line">      lastname = last;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Person;</div><div class="line">  &#125;)();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Person;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello()); <span class="comment">// Hello, John Doe! (Homo sapiens)</span></div><div class="line"><span class="built_in">console</span>.log(john.getFirstname(), john.getLastname(), <span class="string">'('</span> + john.getSpecies() + <span class="string">')'</span>); <span class="comment">// John Doe (Homo sapiens)</span></div><div class="line"></div><div class="line">john.setFirstname(<span class="string">'Jane'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.getFirstname(), john.getLastname()); <span class="comment">// Jane Doe</span></div></pre></td></tr></table></figure>
<h4 id="ES6-6"><a href="#ES6-6" class="headerlink" title="ES6"></a>ES6</h4><p><code>get</code> and <code>set</code> keywords, which were available in ES5 object literals, are now available in ES6 classes. They can be used like so:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> Person = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123; <span class="comment">// public class</span></div><div class="line">  <span class="keyword">let</span> species = <span class="string">''</span>; <span class="comment">// protected attribute</span></div><div class="line"></div><div class="line">  <span class="comment">// Abstract class</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">LivingBeing</span> </span>&#123; <span class="comment">// protected inner class</span></div><div class="line">    <span class="keyword">constructor</span>(s) &#123;</div><div class="line">      species = s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    get species() &#123; <span class="comment">// public getter</span></div><div class="line">      <span class="keyword">return</span> species;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    set species(s) &#123; <span class="comment">// public setter</span></div><div class="line">      species = s;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Concrete class</span></div><div class="line">  <span class="keyword">const</span> Person = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> firstname = <span class="string">''</span>, <span class="comment">// private attribute</span></div><div class="line">        lastname = <span class="string">''</span>; <span class="comment">// private attribute</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">LivingBeing</span> </span>&#123; <span class="comment">// private inner class</span></div><div class="line">      <span class="keyword">constructor</span> (first, last) &#123;</div><div class="line">        <span class="keyword">super</span>(<span class="string">'Homo sapiens'</span>);</div><div class="line">        firstname = first;</div><div class="line">        lastname = last;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      sayHello() &#123; <span class="comment">// public method</span></div><div class="line">        <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;firstname&#125;</span> <span class="subst">$&#123;lastname&#125;</span>! (<span class="subst">$&#123;species&#125;</span>)`</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      get firstname() &#123; <span class="comment">// public getter</span></div><div class="line">        <span class="keyword">return</span> firstname;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      set firstname(first) &#123; <span class="comment">// public setter</span></div><div class="line">        firstname = first;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      get lastname() &#123; <span class="comment">// public getter</span></div><div class="line">        <span class="keyword">return</span> lastname;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      set lastname(last) &#123; <span class="comment">// public setter</span></div><div class="line">        lastname = last;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Person;</div><div class="line">  &#125;)();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Person;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Doe'</span>);</div><div class="line"><span class="built_in">console</span>.log(john.sayHello()); <span class="comment">// Hello, John Doe! (Homo sapiens)</span></div><div class="line"><span class="built_in">console</span>.log(john.firstname, john.lastname, <span class="string">`(<span class="subst">$&#123;john.species&#125;</span>)`</span>); <span class="comment">// John Doe (Homo sapiens)</span></div><div class="line"></div><div class="line">john.firstname = <span class="string">'Jane'</span>;</div><div class="line"><span class="built_in">console</span>.log(john.firstname, john.lastname); <span class="comment">// Jane Doe</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="Back-to-reality"><a href="#Back-to-reality" class="headerlink" title="Back to reality"></a>Back to reality</h2><p>JavaScript is <strong>NOT</strong> Java. Trying to imitate Java with JavaScript is not necessarily a good idea in real life, but this is extremely interesting for educational purposes.</p>
<p>JavaScript is an object-oriented language (in spite of its prototypal nature), but it is much more flexible and permissive than Java. It does not matter if you do not have a strict class hierarchy. It does not matter if you do not have abstraction. It does not even matter if you do not have a strict encapsulation.</p>
<p>For Java developers who really want to feel at home with JavaScript, use <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Meanwhile, in a parallel universe…&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;JavaScript is a scripting language for the Java Platform and JS scripts should strictly apply the key concepts of &lt;strong&gt;object-oriented programming&lt;/strong&gt; (OOP).&lt;/p&gt;
&lt;p&gt;Our task is to model and implement a simple program that involves living beings. This is of course a vast topic and, for the sake of simplicity, we will not deal with peripheral concepts like generics, synchronized methods, collections or packages. This would bring us too far.&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://badacadabra.github.io/categories/JavaScript/"/>
    
    
      <category term="ES5" scheme="https://badacadabra.github.io/tags/ES5/"/>
    
      <category term="OOP" scheme="https://badacadabra.github.io/tags/OOP/"/>
    
      <category term="ES6" scheme="https://badacadabra.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Building a visual form in your terminal emulator with Blessed</title>
    <link href="https://badacadabra.github.io/Building-a-visual-form-in-your-terminal-emulator-with-Blessed/"/>
    <id>https://badacadabra.github.io/Building-a-visual-form-in-your-terminal-emulator-with-Blessed/</id>
    <published>2017-06-05T21:52:43.000Z</published>
    <updated>2017-06-07T21:35:00.973Z</updated>
    
    <content type="html"><![CDATA[<p>Do you like <strong>ncurses</strong>? Do you like <strong>JavaScript</strong>? If yes, you will love <a href="https://github.com/chjj/blessed" target="_blank" rel="external"><strong>Blessed</strong></a>; a Node.js library to create highly interactive and rich text-based user interfaces.</p>
<a id="more"></a>
<h2 id="GUI-vs-CLI-vs-TUI"><a href="#GUI-vs-CLI-vs-TUI" class="headerlink" title="GUI vs CLI vs TUI"></a>GUI vs CLI vs TUI</h2><p><strong>Graphical User Interfaces</strong> (GUIs) are great in terms of design and usability, but they are quite poor when it comes to automation and performance. For complex operations, it is much easier to write a shell script with Bash than programming macros to interact with graphical components. Of course, sometimes we have to test GUIs. But do we need to automate heavy ones when we just want to manipulate files and perform basic operations? The answer is obviously NO.</p>
<p>However, a <strong>Command Line Interface</strong> (CLI) is not very user-friendly. For this reason, we might need a better interface, without sacrificing too much performance. Here comes the <strong>Text-based User Interface</strong> (TUI)…</p>
<p>The principle is simple: we are still in a terminal, we are still in a textual environment, but here we can create visual layouts using widgets. Graphical components are lightweight and can be used to reproduce layouts we can find on most desktop or web applications.</p>
<h2 id="Specifications"><a href="#Specifications" class="headerlink" title="Specifications"></a>Specifications</h2><p>Let’s say we want to get some information about a user. We need to know:</p>
<ul>
<li>The full name (first name + last name) of the user</li>
<li>His favorite text editors among “Vim”, “Emacs”, “Atom” and “Brackets”</li>
<li>If he likes Blessed or not</li>
<li>If he has some comments to share</li>
</ul>
<h2 id="Basic-CLI-implementation-with-Bash"><a href="#Basic-CLI-implementation-with-Bash" class="headerlink" title="Basic CLI implementation with Bash"></a>Basic CLI implementation with Bash</h2><p>To get user input, we can create a Bash script and use the <code>read</code> command. A possible (but very basic) implementation could look like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[0;34mFirst name:\033[0m"</span></div><div class="line"><span class="built_in">read</span> -r firstname</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[0;34mLast name:\033[0m"</span></div><div class="line"><span class="built_in">read</span> -r lastname</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[0;34mWhat are your favorite editors? (enter numbers only)</span></div><div class="line"> 1) Vim</div><div class="line"> 2) Emacs</div><div class="line"> 3) Atom</div><div class="line"> 4) Brackets\033[0m"</div><div class="line"><span class="built_in">read</span> -r selection</div><div class="line"></div><div class="line">editors=<span class="string">""</span></div><div class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$selection</span>"</span> =~ ^.*1.*$ ]]; <span class="keyword">then</span> editors+=<span class="string">"Vim "</span>; <span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$selection</span>"</span> =~ ^.*2.*$ ]]; <span class="keyword">then</span> editors+=<span class="string">"Emacs "</span>; <span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$selection</span>"</span> =~ ^.*3.*$ ]]; <span class="keyword">then</span> editors+=<span class="string">"Atom "</span>; <span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$selection</span>"</span> =~ ^.*4.*$ ]]; <span class="keyword">then</span> editors+=<span class="string">"Brackets "</span>; <span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[0;34mDo you like Blessed? (y/n)\033[0m"</span></div><div class="line"><span class="built_in">read</span> -r blessed</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[0;34mYour comments...\033[0m"</span></div><div class="line"><span class="built_in">read</span> -r comments</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$firstname</span> <span class="variable">$lastname</span></span></div><div class="line">--------------------------</div><div class="line">Favorite editors: <span class="variable">$editors</span></div><div class="line">Likes Blessed: <span class="variable">$blessed</span></div><div class="line">Comments: <span class="variable">$comments</span>" &gt; data.txt</div></pre></td></tr></table></figure>
<p>If I run the script and provide all relevant information, a <code>data.txt</code> file is generated with the following content:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Baptiste Vannesson</div><div class="line">--------------------------</div><div class="line">Favorite editors: Vim Atom </div><div class="line">Likes Blessed: y</div><div class="line">Comments: It works!</div></pre></td></tr></table></figure>
<p>This solution is acceptable if we do not need a sophisticated interface. But to shine in society, we may need something more advanced… Blessed comes to the rescue!</p>
<h2 id="Advanced-TUI-implementation-with-Blessed"><a href="#Advanced-TUI-implementation-with-Blessed" class="headerlink" title="Advanced TUI implementation with Blessed"></a>Advanced TUI implementation with Blessed</h2><p>Here is the layout we are going to build programmatically:</p>
<p><img src="/Building-a-visual-form-in-your-terminal-emulator-with-Blessed/blessed.png" alt="Blessed form"></p>
<h3 id="Importing-modules"><a href="#Importing-modules" class="headerlink" title="Importing modules"></a>Importing modules</h3><p>Here we use the <strong>CommonJS</strong> syntax. We need two modules only: <strong>blessed</strong> and <strong>fs</strong>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> blessed = <span class="built_in">require</span>(<span class="string">'blessed'</span>),</div><div class="line">    fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div></pre></td></tr></table></figure>
<h3 id="Creating-a-screen-object"><a href="#Creating-a-screen-object" class="headerlink" title="Creating a screen object"></a>Creating a screen object</h3><p>Just like the scene in <a href="https://threejs.org/" target="_blank" rel="external">three.js</a>, we need a primary object to render something on screen. With Blessed, this is easy to memorize because it is actually the <strong>screen</strong> object (which has a <code>render()</code> method). The following code creates a screen object called “Blessed form” with smart CSR (change-scroll-region) for a more efficient rendering:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> screen = blessed.screen(&#123;</div><div class="line">  <span class="attr">smartCSR</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">title</span>: <span class="string">'Blessed form'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Because we are building a TUI, we can set global key bindings to interact more easily with our interface. A must-have is a shortcut that allows us to quit instead of killing the current shell session. By convention, we will press <kbd>Q</kbd> to quit:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">screen.key(<span class="string">'q'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.destroy();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Configuring-widgets"><a href="#Configuring-widgets" class="headerlink" title="Configuring widgets"></a>Configuring widgets</h3><p>Creating user interfaces with Blessed is not very hard, but extremely verbose and declarative. The library makes an intensive use of the <strong>object specifier</strong> pattern (aka <strong>options object</strong>).</p>
<blockquote>
<p>It sometimes happens that a constructor is given a very large number of parameters. This can be troublesome because it can be very difficult to remember the order of the arguments. In such cases, it can be much friendlier if we write the constructor to accept a single object specifier instead. That object contains the specification of the object to be constructed.</p>
<p><strong>Douglas Crockford</strong>, <em>JavaScript: The Good Parts</em></p>
</blockquote>
<p>In fact, Blessed is based on <strong>widgets</strong> (text inputs, checkboxes, radio buttons, etc.) that can be configured quite precisely. As an example, here we create the form and its first text box:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> form = blessed.form(&#123;</div><div class="line">  <span class="attr">parent</span>: screen,</div><div class="line">  <span class="attr">width</span>: <span class="string">'90%'</span>,</div><div class="line">  <span class="attr">left</span>: <span class="string">'center'</span>,</div><div class="line">  <span class="attr">keys</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">vi</span>: <span class="literal">true</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> label = blessed.text(&#123;</div><div class="line">  <span class="attr">parent</span>: screen,</div><div class="line">  <span class="attr">top</span>: <span class="number">3</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'FIRST NAME:'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> firstName = blessed.textbox(&#123;</div><div class="line">  <span class="attr">parent</span>: form,</div><div class="line">  <span class="attr">name</span>: <span class="string">'firstname'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">4</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">height</span>: <span class="number">3</span>,</div><div class="line">  <span class="attr">inputOnFocus</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'first'</span>,</div><div class="line">  <span class="attr">border</span>: &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'line'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">focus</span>: &#123;</div><div class="line">    <span class="attr">fg</span>: <span class="string">'blue'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Blessed positioning is a bit less convenient and powerful than CSS positioning, but we do not have the same constraints for a web page and a terminal app. For a TUI, absolute positioning does the job quite well…</p>
<h3 id="Handling-events"><a href="#Handling-events" class="headerlink" title="Handling events"></a>Handling events</h3><p>To submit or reset the form, we have two main buttons: <code>submit</code> &amp; <code>reset</code>. These buttons must trigger the appropriate form action. It could be done like so:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">submit.on(<span class="string">'press'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  form.submit();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">reset.on(<span class="string">'press'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  form.reset();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>When the form is submitted, we have to parse its data properly and write the result to a file. When it is reset, we just send a message (a toast):</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">form.on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="comment">// Checkboxes return an array of booleans like [true, false, true, false]</span></div><div class="line">  <span class="keyword">var</span> editors = [<span class="string">'Vim'</span>, <span class="string">'Emacs'</span>, <span class="string">'Atom'</span>, <span class="string">'Brackets'</span>].filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> data.editors[index];</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  msg.display(<span class="string">'Form submitted!'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> summary = <span class="string">''</span>;</div><div class="line">    summary += data.firstname + <span class="string">' '</span> + data.lastname + <span class="string">'\n'</span>;</div><div class="line">    summary += <span class="string">'------------------------------\n'</span>;</div><div class="line">    summary += <span class="string">'Favorite editors: '</span> + editors + <span class="string">'\n'</span>;</div><div class="line">    summary += <span class="string">'Likes Blessed: '</span> + data.like[<span class="number">0</span>] + <span class="string">'\n'</span>;</div><div class="line">    summary += <span class="string">'Comments: '</span> + data.comments;</div><div class="line"></div><div class="line">    fs.writeFile(<span class="string">'form-data.txt'</span>, summary, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">form.on(<span class="string">'reset'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  msg.display(<span class="string">'Form cleared!'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Done!</p>
<h3 id="Full-implementation"><a href="#Full-implementation" class="headerlink" title="Full implementation"></a>Full implementation</h3><p>If your environment is properly set up, you can run the following script with <code>node</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> blessed = <span class="built_in">require</span>(<span class="string">'blessed'</span>),</div><div class="line">    fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Screen</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> screen = blessed.screen(&#123;</div><div class="line">  <span class="attr">smartCSR</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">title</span>: <span class="string">'Blessed form'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Form</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> form = blessed.form(&#123;</div><div class="line">  <span class="attr">parent</span>: screen,</div><div class="line">  <span class="attr">width</span>: <span class="string">'90%'</span>,</div><div class="line">  <span class="attr">left</span>: <span class="string">'center'</span>,</div><div class="line">  <span class="attr">keys</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">vi</span>: <span class="literal">true</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Text boxes</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> label1 = blessed.text(&#123;</div><div class="line">  <span class="attr">parent</span>: screen,</div><div class="line">  <span class="attr">top</span>: <span class="number">3</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'FIRST NAME:'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> firstName = blessed.textbox(&#123;</div><div class="line">  <span class="attr">parent</span>: form,</div><div class="line">  <span class="attr">name</span>: <span class="string">'firstname'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">4</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">height</span>: <span class="number">3</span>,</div><div class="line">  <span class="attr">inputOnFocus</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'first'</span>,</div><div class="line">  <span class="attr">border</span>: &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'line'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">focus</span>: &#123;</div><div class="line">    <span class="attr">fg</span>: <span class="string">'blue'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> label2 = blessed.text(&#123;</div><div class="line">  <span class="attr">parent</span>: screen,</div><div class="line">  <span class="attr">content</span>: <span class="string">'LAST NAME:'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">8</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> lastName = blessed.textbox(&#123;</div><div class="line">  <span class="attr">parent</span>: form,</div><div class="line">  <span class="attr">name</span>: <span class="string">'lastname'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">9</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">height</span>: <span class="number">3</span>,</div><div class="line">  <span class="attr">inputOnFocus</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'last'</span>,</div><div class="line">  <span class="attr">border</span>: &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'line'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">focus</span>: &#123;</div><div class="line">    <span class="attr">fg</span>: <span class="string">'blue'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Check boxes</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> label3 = blessed.text(&#123;</div><div class="line">  <span class="attr">parent</span>: screen,</div><div class="line">  <span class="attr">content</span>: <span class="string">'What are your favorite editors?'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">14</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> vim = blessed.checkbox(&#123;</div><div class="line">  <span class="attr">parent</span>: form,</div><div class="line">  <span class="attr">name</span>: <span class="string">'editors'</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'Vim'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">16</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> emacs = blessed.checkbox(&#123;</div><div class="line">  <span class="attr">parent</span>: form,</div><div class="line">  <span class="attr">name</span>: <span class="string">'editors'</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'Emacs'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">16</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">20</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> atom = blessed.checkbox(&#123;</div><div class="line">  <span class="attr">parent</span>: form,</div><div class="line">  <span class="attr">name</span>: <span class="string">'editors'</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'Atom'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">16</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">35</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> brackets = blessed.checkbox(&#123;</div><div class="line">  <span class="attr">parent</span>: form,</div><div class="line">  <span class="attr">name</span>: <span class="string">'editors'</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'Brackets'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">16</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">50</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Radio buttons</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> label4 = blessed.text(&#123;</div><div class="line">  <span class="attr">parent</span>: screen,</div><div class="line">  <span class="attr">content</span>: <span class="string">'Do you like Blessed?'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">19</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> radioset = blessed.radioset(&#123;</div><div class="line">  <span class="attr">parent</span>: form,</div><div class="line">  <span class="attr">width</span>: <span class="string">'100%'</span>,</div><div class="line">  <span class="attr">height</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">21</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> yes = blessed.radiobutton(&#123;</div><div class="line">  <span class="attr">parent</span>: radioset,</div><div class="line">  <span class="attr">name</span>: <span class="string">'like'</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'Yes'</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> no = blessed.radiobutton(&#123;</div><div class="line">  <span class="attr">parent</span>: radioset,</div><div class="line">  <span class="attr">name</span>: <span class="string">'like'</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'No'</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">15</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Text area</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> label5 = blessed.text(&#123;</div><div class="line">  <span class="attr">parent</span>: screen,</div><div class="line">  <span class="attr">content</span>: <span class="string">'Your comments...'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">24</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> textarea = blessed.textarea(&#123;</div><div class="line">  <span class="attr">parent</span>: form,</div><div class="line">  <span class="attr">name</span>: <span class="string">'comments'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">26</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">height</span>: <span class="number">7</span>,</div><div class="line">  <span class="attr">inputOnFocus</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">border</span>: &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'line'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Submit/Cancel buttons</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> submit = blessed.button(&#123;</div><div class="line">  <span class="attr">parent</span>: form,</div><div class="line">  <span class="attr">name</span>: <span class="string">'submit'</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'Submit'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">35</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">shrink</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">padding</span>: &#123;</div><div class="line">    <span class="attr">top</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">right</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">bottom</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">left</span>: <span class="number">2</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">style</span>: &#123;</div><div class="line">    <span class="attr">bold</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">fg</span>: <span class="string">'white'</span>,</div><div class="line">    <span class="attr">bg</span>: <span class="string">'green'</span>,</div><div class="line">    <span class="attr">focus</span>: &#123;</div><div class="line">      <span class="attr">inverse</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> reset = blessed.button(&#123;</div><div class="line">  <span class="attr">parent</span>: form,</div><div class="line">  <span class="attr">name</span>: <span class="string">'reset'</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'Reset'</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">35</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">15</span>,</div><div class="line">  <span class="attr">shrink</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">padding</span>: &#123;</div><div class="line">    <span class="attr">top</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">right</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">bottom</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">left</span>: <span class="number">2</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">style</span>: &#123;</div><div class="line">    <span class="attr">bold</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">fg</span>: <span class="string">'white'</span>,</div><div class="line">    <span class="attr">bg</span>: <span class="string">'red'</span>,</div><div class="line">    <span class="attr">focus</span>: &#123;</div><div class="line">      <span class="attr">inverse</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Info</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> msg = blessed.message(&#123;</div><div class="line">  <span class="attr">parent</span>: screen,</div><div class="line">  <span class="attr">top</span>: <span class="number">40</span>,</div><div class="line">  <span class="attr">left</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">style</span>: &#123;</div><div class="line">    <span class="attr">italic</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">fg</span>: <span class="string">'green'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> table = blessed.table(&#123;</div><div class="line">  <span class="attr">parent</span>: screen,</div><div class="line">  <span class="attr">content</span>: <span class="string">''</span>,</div><div class="line">  <span class="attr">top</span>: <span class="number">40</span>,</div><div class="line">  <span class="attr">left</span>: <span class="string">'center'</span>,</div><div class="line">  <span class="attr">style</span>: &#123;</div><div class="line">    <span class="attr">fg</span>: <span class="string">'green'</span>,</div><div class="line">    <span class="attr">header</span>: &#123;</div><div class="line">      <span class="attr">bold</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">fg</span>: <span class="string">'white'</span>,</div><div class="line">      <span class="attr">bg</span>: <span class="string">'blue'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">hidden</span>: <span class="literal">true</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Event management</span></div><div class="line"></div><div class="line">submit.on(<span class="string">'press'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  form.submit();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">reset.on(<span class="string">'press'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  form.reset();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">form.on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> editors = [<span class="string">'Vim'</span>, <span class="string">'Emacs'</span>, <span class="string">'Atom'</span>, <span class="string">'Brackets'</span>].filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> data.editors[index];</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  msg.display(<span class="string">'Form submitted!'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> summary = <span class="string">''</span>;</div><div class="line">    summary += data.firstname + <span class="string">' '</span> + data.lastname + <span class="string">'\n'</span>;</div><div class="line">    summary += <span class="string">'------------------------------\n'</span>;</div><div class="line">    summary += <span class="string">'Favorite editors: '</span> + editors + <span class="string">'\n'</span>;</div><div class="line">    summary += <span class="string">'Likes Blessed: '</span> + data.like[<span class="number">0</span>] + <span class="string">'\n'</span>;</div><div class="line">    summary += <span class="string">'Comments: '</span> + data.comments;</div><div class="line"></div><div class="line">    fs.writeFile(<span class="string">'form-data.txt'</span>, summary, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">form.on(<span class="string">'reset'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  msg.display(<span class="string">'Form cleared!'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Key bindings</span></div><div class="line"></div><div class="line">screen.key(<span class="string">'q'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.destroy();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Render everything!</span></div><div class="line"></div><div class="line">screen.render();</div></pre></td></tr></table></figure>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Building an advanced TUI may be a long process. Sometimes a raw CLI program is better, but if usability really matters, Blessed can be an interesting option and a good alternative to ncurses.</p>
<p>By the way, in the use case presented here, there is no validation at all: not in our Bash script, nor in our Blessed script. If you want a good exercise, maybe you can try to implement it…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Do you like &lt;strong&gt;ncurses&lt;/strong&gt;? Do you like &lt;strong&gt;JavaScript&lt;/strong&gt;? If yes, you will love &lt;a href=&quot;https://github.com/chjj/blessed&quot;&gt;&lt;strong&gt;Blessed&lt;/strong&gt;&lt;/a&gt;; a Node.js library to create highly interactive and rich text-based user interfaces.&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://badacadabra.github.io/categories/JavaScript/"/>
    
    
      <category term="Blessed" scheme="https://badacadabra.github.io/tags/Blessed/"/>
    
      <category term="Node.js" scheme="https://badacadabra.github.io/tags/Node-js/"/>
    
      <category term="ES5" scheme="https://badacadabra.github.io/tags/ES5/"/>
    
  </entry>
  
  <entry>
    <title>Scraping a Ghost blog with PhantomJS and SlimerJS using CasperJS</title>
    <link href="https://badacadabra.github.io/Scraping-a-Ghost-blog-with-PhantomJS-and-SlimerJS-using-CasperJS/"/>
    <id>https://badacadabra.github.io/Scraping-a-Ghost-blog-with-PhantomJS-and-SlimerJS-using-CasperJS/</id>
    <published>2017-06-03T00:19:49.000Z</published>
    <updated>2017-06-07T00:49:32.763Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post will haunt your computer forever. You have been warned! :D</p>
<p>In this article, we are going to present different techniques to scrape a <strong>Ghost</strong> blog (especially with the default <strong>Casper</strong> theme). We will use <strong>CasperJS</strong>, which is a scripting utility for <strong>PhantomJS</strong> (WebKit headless browser) and <strong>SlimerJS</strong> (Gecko minimalist GUI browser).</p>
<a id="more"></a>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol>
<li><a href="http://phantomjs.org/download.html" target="_blank" rel="external">PhantomJS</a>: <code>npm i -g phantomjs-prebuilt</code></li>
<li><a href="https://slimerjs.org/download.html" target="_blank" rel="external">SlimerJS</a>: <code>npm i -g slimerjs</code></li>
<li><a href="http://docs.casperjs.org/en/latest/installation.html" target="_blank" rel="external">CasperJS</a>: <code>npm i -g casperjs</code></li>
</ol>
<h2 id="The-basics"><a href="#The-basics" class="headerlink" title="The basics"></a>The basics</h2><p>A regular CasperJS script is composed of <strong>steps</strong> and has the following structure:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> casper = <span class="built_in">require</span>(<span class="string">'casper'</span>).create();</div><div class="line"></div><div class="line">casper.start(<span class="string">'http://www.website.com'</span>);</div><div class="line"></div><div class="line">casper.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// Do something...</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">casper.run();</div></pre></td></tr></table></figure>
<p><a href="http://docs.casperjs.org/en/latest/modules/casper.html#casper-prototype" target="_blank" rel="external"><code>Casper.prototype</code></a> defines lots of useful methods to interact with webpages and the most powerful one is probably <a href="http://docs.casperjs.org/en/latest/modules/casper.html#evaluate" target="_blank" rel="external"><code>evaluate()</code></a> that gives a direct access to the DOM…</p>
<h2 id="Printing-a-list-of-the-latest-articles-to-console"><a href="#Printing-a-list-of-the-latest-articles-to-console" class="headerlink" title="Printing a list of the latest articles to console"></a>Printing a list of the latest articles to console</h2><p>OK, so… Let’s take my personal blog in French as an example. In the following script (<em>ghost.js</em>), we get a list of the latest articles (these ones are displayed on the homepage):</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> casper = <span class="built_in">require</span>(<span class="string">'casper'</span>).create();</div><div class="line"></div><div class="line"><span class="comment">// Tell CasperJS to visit the homepage</span></div><div class="line">casper.start(<span class="string">'http://blog.badacadabra.net'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Wait for articles to be loaded</span></div><div class="line">casper.waitForSelector(<span class="string">'article'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.echo(<span class="string">'BLOG TITLE:\n'</span> + <span class="keyword">this</span>.getTitle());</div><div class="line">  <span class="keyword">this</span>.echo(<span class="string">'\nLATEST ARTICLES:'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// Each title in the "titles" array returned by "evaluate"...</span></div><div class="line">  <span class="keyword">this</span>.each(<span class="keyword">this</span>.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> articles = <span class="built_in">document</span>.querySelectorAll(<span class="string">'article'</span>),</div><div class="line">        titles = [];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; articles.length; i++) &#123;</div><div class="line">      titles.push(articles[i].querySelector(<span class="string">'.post-title'</span>).textContent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> titles;</div><div class="line">  &#125;), <span class="function"><span class="keyword">function</span> (<span class="params">self, title</span>) </span>&#123;</div><div class="line">    <span class="comment">// ... should be displayed in console!</span></div><div class="line">    <span class="keyword">this</span>.echo(title);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">casper.run();</div></pre></td></tr></table></figure>
<p>To run the script:</p>
<ul>
<li>PhantomJS: <code>casperjs ghost.js</code></li>
<li>SlimerJS: <code>casperjs --engine=slimerjs ghost.js</code></li>
</ul>
<p>Here is the output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">BLOG TITLE:</div><div class="line">Hocus Pocus Numericus | Blog de Baptiste Vannesson (Badacadabra)</div><div class="line"></div><div class="line">LATEST ARTICLES:</div><div class="line">Les robots ont-ils des droits ?</div><div class="line">Stress, anxiété et phobies à l&apos;ère du numérique</div><div class="line">Le règne de l&apos;autodidaxie</div><div class="line">Les limites du transhumanisme</div><div class="line">L&apos;ambiguïté du référencement payant</div></pre></td></tr></table></figure>
<p>So far, so good! But what if we want to get a full list of all articles?</p>
<h2 id="Printing-a-list-of-all-published-articles-to-console"><a href="#Printing-a-list-of-all-published-articles-to-console" class="headerlink" title="Printing a list of all published articles to console"></a>Printing a list of all published articles to console</h2><p>An elegant solution to achieve this goal is to use <strong>recursion</strong>. Our scraper starts on the homepage, tests if there are older posts (using pagination as a reference), and goes from page to page thanks to an IIFE (Immediately-Invoked Function Expression) which calls itself.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> casper = <span class="built_in">require</span>(<span class="string">'casper'</span>).create();</div><div class="line"></div><div class="line">casper.start(<span class="string">'http://blog.badacadabra.net'</span>);</div><div class="line"></div><div class="line">casper.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.echo(<span class="string">'BLOG TITLE:\n'</span> + <span class="keyword">this</span>.getTitle());</div><div class="line">  <span class="keyword">this</span>.echo(<span class="string">'\nLATEST ARTICLES:'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Recursive IIFE</span></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">getPostTitles</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  casper.waitForSelector(<span class="string">'article'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.each(<span class="keyword">this</span>.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> articles = <span class="built_in">document</span>.querySelectorAll(<span class="string">'article'</span>),</div><div class="line">          titles = [];</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; articles.length; i++) &#123;</div><div class="line">        titles.push(articles[i].querySelector(<span class="string">'.post-title'</span>).textContent);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> titles;</div><div class="line">    &#125;), <span class="function"><span class="keyword">function</span> (<span class="params">self, title</span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.echo(title);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  casper.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// If the link to older posts is present in pagination, ...</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.visible(<span class="string">'.older-posts'</span>)) &#123;</div><div class="line">      <span class="comment">// ... click it to go to the next page, ...</span></div><div class="line">      <span class="keyword">this</span>.click(<span class="string">'.older-posts'</span>);</div><div class="line">      <span class="comment">// ... then run the same operations on this new page</span></div><div class="line">      getPostTitles();</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">casper.run();</div></pre></td></tr></table></figure>
<p>Cool! Getting lists of headlines is funny, but is it really useful? RSS feed readers already do this for us without efforts. Would it not be more interesting to extract all articles and create appropriate files to store local copies automatically? Let’s do this right now!</p>
<h2 id="Extracting-all-articles-to-save-local-copies-in-filesystem"><a href="#Extracting-all-articles-to-save-local-copies-in-filesystem" class="headerlink" title="Extracting all articles to save local copies in filesystem"></a>Extracting all articles to save local copies in filesystem</h2><p>Extracting all articles is not so easy without a clear methodology. Our script should:</p>
<ol>
<li>Start on the homepage</li>
<li>Visit the first article</li>
<li>Extract this article</li>
<li>Go back to the homepage</li>
<li>Visit the second article</li>
<li>…</li>
<li>Go to the next page</li>
<li>Visit the first article of this page</li>
<li>…</li>
<li>End when the last article from the last page has been extracted</li>
</ol>
<p>It would be easy to define an array of predefined URLs, but this is not what we are going to do. This solution is not viable because each new article would not be taken into account by our script. In fact, we have to simulate the behavior of a user who would click each article in sequence to download all blog posts.</p>
<p>Here we will need to interact with the filesystem, so the <strong>fs</strong> module is required. For this script, we keep the recursive IIFE:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> casper = <span class="built_in">require</span>(<span class="string">'casper'</span>).create(),</div><div class="line">    fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">casper.start(<span class="string">'http://blog.badacadabra.net'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> index = <span class="number">1</span>, <span class="comment">// index of the article in the current page</span></div><div class="line">    content = <span class="string">''</span>; <span class="comment">// textual content of the latest extracted article</span></div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">getPostContent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// Wait for articles to be loaded</span></div><div class="line">  casper.waitForSelector(<span class="string">'article'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Click the first link (the index starts at 1)</span></div><div class="line">    <span class="keyword">this</span>.click(<span class="string">'.post:nth-of-type('</span> + index + <span class="string">') a'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  casper.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Extract the textual content of the article</span></div><div class="line">    content = <span class="keyword">this</span>.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">'.post'</span>).textContent;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  casper.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> title = <span class="keyword">this</span>.getTitle();</div><div class="line">    <span class="keyword">this</span>.echo(<span class="string">'EXTRACTING - '</span> + title);</div><div class="line">    <span class="comment">// Process the title string to create a decent filename</span></div><div class="line">    title = title.replace(<span class="regexp">/[ '",]/g</span>, <span class="string">'-'</span>).toLowerCase();</div><div class="line">    <span class="comment">// Write the file to disk</span></div><div class="line">    fs.write(<span class="string">'articles/'</span> + title, content, <span class="string">'w'</span>);</div><div class="line">    <span class="comment">// Go back to the homepage</span></div><div class="line">    <span class="keyword">this</span>.back();</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  casper.waitForSelector(<span class="string">'article'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    index++;</div><div class="line">    <span class="comment">// If there is another article on this page, get its content</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.visible(<span class="string">'.post:nth-of-type('</span> + index + <span class="string">')'</span>)) &#123;</div><div class="line">      getPostContent();</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// If not, continue on the next page (if there is one)</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.visible(<span class="string">'.older-posts'</span>)) &#123;</div><div class="line">        index = <span class="number">1</span>;</div><div class="line">        <span class="keyword">this</span>.click(<span class="string">'.older-posts'</span>);</div><div class="line">        getPostContent();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">casper.run();</div></pre></td></tr></table></figure>
<p>Done! This script will create a local <code>articles/</code> directory containing articles/files with raw textual content.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>CasperJS is a powerful automation library on top of PhantomJS and SlimerJS. Moreover, thanks to a clean HTML code, a Ghost blog is a pleasure to scrape!</p>
<p>If you want to learn more about these amazing technologies, maybe you can try to scrape articles filtered by author, by tag or by date… This is not very difficult with the code provided here, but this is a good exercise. You may also be interested in the <a href="https://api.ghost.org/v0.1/docs" target="_blank" rel="external">Ghost API</a>.</p>
<p>Spectres have never been so kind!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This blog post will haunt your computer forever. You have been warned! :D&lt;/p&gt;
&lt;p&gt;In this article, we are going to present different techniques to scrape a &lt;strong&gt;Ghost&lt;/strong&gt; blog (especially with the default &lt;strong&gt;Casper&lt;/strong&gt; theme). We will use &lt;strong&gt;CasperJS&lt;/strong&gt;, which is a scripting utility for &lt;strong&gt;PhantomJS&lt;/strong&gt; (WebKit headless browser) and &lt;strong&gt;SlimerJS&lt;/strong&gt; (Gecko minimalist GUI browser).&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://badacadabra.github.io/categories/JavaScript/"/>
    
    
      <category term="ES5" scheme="https://badacadabra.github.io/tags/ES5/"/>
    
      <category term="Ghost" scheme="https://badacadabra.github.io/tags/Ghost/"/>
    
      <category term="PhantomJS" scheme="https://badacadabra.github.io/tags/PhantomJS/"/>
    
      <category term="SlimerJS" scheme="https://badacadabra.github.io/tags/SlimerJS/"/>
    
      <category term="CasperJS" scheme="https://badacadabra.github.io/tags/CasperJS/"/>
    
  </entry>
  
  <entry>
    <title>Understanding JSFuck</title>
    <link href="https://badacadabra.github.io/Understanding-JSFuck/"/>
    <id>https://badacadabra.github.io/Understanding-JSFuck/</id>
    <published>2017-05-31T23:36:53.000Z</published>
    <updated>2017-06-07T00:49:01.157Z</updated>
    
    <content type="html"><![CDATA[<p><em>JavaScript: The Good Parts</em> readers and <strong>Douglas Crockford</strong> fans know that JavaScript subsets matter. Due to the permissive and versatile nature of the language, it is reasonable to select only the most solid stones to build a wall. But hey, why would we need to bother with a full programming language when we just need 6 characters? Here comes <a href="http://www.jsfuck.com/" target="_blank" rel="external"><strong>JSFuck</strong></a> by <strong>Martin Kleppe</strong>…</p>
<a id="more"></a>
<blockquote>
<p>JSFuck is an esoteric and educational programming style based on the atomic parts of JavaScript. It uses only six different characters to write and execute code.</p>
</blockquote>
<p>I know what you think: “<em>6 characters? WTF!?</em>“. Yes, JSFuck allows you to code using <code>(</code>, <code>)</code>, <code>[</code>, <code>]</code>, <code>+</code> and <code>!</code> only. How is this possible?</p>
<p>To understand what is going on behind JSFuck, we have to explain how JavaScript works with:</p>
<ul>
<li><strong>Type conversion/coercion</strong></li>
<li><strong>Truthy/falsy values</strong></li>
<li><strong>Operator precedence/associativity</strong></li>
<li><strong>Bracket notation</strong></li>
</ul>
<h2 id="Type-conversion-coercion"><a href="#Type-conversion-coercion" class="headerlink" title="Type conversion/coercion"></a>Type conversion/coercion</h2><h3 id="Explicit-type-conversion"><a href="#Explicit-type-conversion" class="headerlink" title="Explicit type conversion"></a>Explicit type conversion</h3><p>For explicit type conversion in JavaScript, <strong>unary operators</strong> like <code>+</code> or <code>!</code> may be used:</p>
<ul>
<li><code>+</code> can convert the operand to a number</li>
<li><code>!</code> can convert the operand to a boolean (and “negates” it)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MULTIPLE TYPES</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">''</span>,</div><div class="line">    nb = <span class="number">42</span>,</div><div class="line">    bool = <span class="literal">true</span>,</div><div class="line">    arr = [],</div><div class="line">    obj = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str, <span class="keyword">typeof</span> str); <span class="comment">// "" string</span></div><div class="line"><span class="built_in">console</span>.log(nb, <span class="keyword">typeof</span> nb); <span class="comment">// 42 number</span></div><div class="line"><span class="built_in">console</span>.log(bool, <span class="keyword">typeof</span> bool); <span class="comment">// true boolean</span></div><div class="line"><span class="built_in">console</span>.log(arr, <span class="built_in">Array</span>.isArray(arr)); <span class="comment">// [] true</span></div><div class="line"><span class="built_in">console</span>.log(obj, <span class="keyword">typeof</span> obj); <span class="comment">// &#123;&#125; object</span></div><div class="line"></div><div class="line"><span class="comment">// NUMBERS</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> n_str = +str,</div><div class="line">    n_nb = +nb,</div><div class="line">    n_bool = +bool,</div><div class="line">    n_arr = +arr,</div><div class="line">    n_obj = +obj;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(n_str, <span class="keyword">typeof</span> n_str); <span class="comment">// 0 number</span></div><div class="line"><span class="built_in">console</span>.log(n_nb, <span class="keyword">typeof</span> n_nb); <span class="comment">// 42 number</span></div><div class="line"><span class="built_in">console</span>.log(n_bool, <span class="keyword">typeof</span> n_bool); <span class="comment">// 1 number</span></div><div class="line"><span class="built_in">console</span>.log(n_arr, <span class="keyword">typeof</span> n_arr); <span class="comment">// 0 number</span></div><div class="line"><span class="built_in">console</span>.log(n_obj, <span class="keyword">typeof</span> n_obj); <span class="comment">// NaN number</span></div><div class="line"></div><div class="line"><span class="comment">// BOOLEANS</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> b_str = !str,</div><div class="line">    b_nb = !nb,</div><div class="line">    b_bool = !bool,</div><div class="line">    b_arr = !arr,</div><div class="line">    b_obj = !obj;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b_str, <span class="keyword">typeof</span> b_str); <span class="comment">// true boolean</span></div><div class="line"><span class="built_in">console</span>.log(b_nb, <span class="keyword">typeof</span> b_nb); <span class="comment">// false boolean</span></div><div class="line"><span class="built_in">console</span>.log(b_bool, <span class="keyword">typeof</span> b_bool); <span class="comment">// false boolean</span></div><div class="line"><span class="built_in">console</span>.log(b_arr, <span class="keyword">typeof</span> b_arr); <span class="comment">// false boolean</span></div><div class="line"><span class="built_in">console</span>.log(b_obj, <span class="keyword">typeof</span> b_obj); <span class="comment">// false boolean</span></div></pre></td></tr></table></figure>
<h3 id="Implicit-type-conversion-coercion"><a href="#Implicit-type-conversion-coercion" class="headerlink" title="Implicit type conversion (coercion)"></a>Implicit type conversion (coercion)</h3><p>There would be many things to say about type coercion in JavaScript… However, with JSFuck, we only need to understand why:</p>
<ul>
<li><code>[]+[]</code> is an empty string</li>
<li><code>+[]</code> is <code>0</code></li>
<li><code>true+false</code> = <code>1</code></li>
</ul>
<p>These three odd behaviors are linked to the same ambiguity: the <code>+</code> operator which can be used for concatenation (in a string context) and for addition/incrementation/conversion (in a numerical context).</p>
<p>In fact, <code>Array.prototype.toString()</code> is called internally during an array-to-primitive conversion, and we know that its output is different from the one given by <code>Object.prototype.toString()</code>: it will not return something like <code>[object Object]</code>, but a concatenation of all elements in the array with a comma as a separator.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.toString()); <span class="comment">// foo,bar,baz</span></div></pre></td></tr></table></figure>
<p>Of course, if the array is empty, <code>Array.prototype.toString()</code> returns an empty string. That is why <code>[]+[]</code> gives an empty string: this operation is actually no more than a concatenation of empty strings after coercion!</p>
<p>Moreover, when converted to a number, an empty string becomes <code>0</code>. <code>[object Object]</code> is not an empty string and does not contain numbers, so it becomes <code>NaN</code>. Here is what happens (roughly) under the hood:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log([].toString() + [].toString()); <span class="comment">// ""</span></div><div class="line"><span class="built_in">console</span>.log([].toString(), +[].toString()); <span class="comment">// "" 0</span></div><div class="line"><span class="built_in">console</span>.log(&#123;&#125;.toString(), +&#123;&#125;.toString()); <span class="comment">// [object Object] NaN</span></div></pre></td></tr></table></figure>
<p>An operation with <code>+</code> where operands are booleans is not evaluated in a string context, but in a numerical context. This means booleans are coerced to numbers. <code>true</code> becomes <code>1</code> and <code>false</code> becomes <code>0</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> + <span class="literal">false</span>); <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="literal">false</span>); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="literal">true</span>); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h2 id="Truthy-Falsy-values"><a href="#Truthy-Falsy-values" class="headerlink" title="Truthy/Falsy values"></a>Truthy/Falsy values</h2><p>In boolean expressions, JavaScript accepts booleans (<code>true</code>/<code>false</code>), but it also evaluates <strong>truthy</strong> and <strong>falsy</strong> values:</p>
<ul>
<li>An object (object literal, array, function, etc.) is always <strong>truthy</strong></li>
<li><code>undefined</code>, <code>null</code>, <code>NaN</code>, <code>0</code> and the empty string are <strong>falsy</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">truthyOrFalsy</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">  arg ? <span class="built_in">console</span>.log(<span class="string">'truthy'</span>) : <span class="built_in">console</span>.log(<span class="string">'falsy'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">truthyOrFalsy(<span class="string">''</span>); <span class="comment">// falsy</span></div><div class="line">truthyOrFalsy(<span class="string">'str'</span>); <span class="comment">// truthy</span></div><div class="line">truthyOrFalsy(<span class="number">0</span>); <span class="comment">// falsy</span></div><div class="line">truthyOrFalsy(<span class="number">1</span>); <span class="comment">// truthy</span></div><div class="line">truthyOrFalsy([]); <span class="comment">// truthy</span></div><div class="line">truthyOrFalsy(&#123;&#125;); <span class="comment">// truthy</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(!<span class="string">''</span>, !!<span class="string">''</span>); <span class="comment">// true false</span></div><div class="line"><span class="built_in">console</span>.log(!<span class="string">'str'</span>, !!<span class="string">'str'</span>); <span class="comment">// false true</span></div><div class="line"><span class="built_in">console</span>.log(!<span class="number">0</span>, !!<span class="number">0</span>); <span class="comment">// true false</span></div><div class="line"><span class="built_in">console</span>.log(!<span class="number">1</span>, !!<span class="number">1</span>); <span class="comment">// false true</span></div><div class="line"><span class="built_in">console</span>.log(![], !![]); <span class="comment">// false true</span></div><div class="line"><span class="built_in">console</span>.log(!&#123;&#125;, !!&#123;&#125;); <span class="comment">// false true</span></div></pre></td></tr></table></figure>
<p>Obviously, truthy values become <code>true</code> when they are converted to booleans with <code>!!</code> (double logical NOT or “NOT NOT”) and falsy values become <code>false</code>.</p>
<h2 id="Operator-precedence-and-associativity"><a href="#Operator-precedence-and-associativity" class="headerlink" title="Operator precedence and associativity"></a>Operator precedence and associativity</h2><p>Just like in math, operations must be performed in a specific order, following certain conventions. This order is determined by:</p>
<ul>
<li>Operator precedence</li>
<li>Operator associativity</li>
</ul>
<h3 id="Operator-precedence"><a href="#Operator-precedence" class="headerlink" title="Operator precedence"></a>Operator precedence</h3><p>Each operator has its own priority. For example, we know that multiplication takes priority over addition and that parentheses allow us to override this natural priority.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span>); <span class="comment">// 7</span></div><div class="line"><span class="built_in">console</span>.log((<span class="number">1</span> + <span class="number">2</span>) * <span class="number">3</span>); <span class="comment">// 9</span></div></pre></td></tr></table></figure>
<p>Like most programming languages, JavaScript has many operators. The full <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table" target="_blank" rel="external">reference of operator precedence</a> is available on MDN.</p>
<p>An interesting point is that the unary <code>+</code> has higher precedence than the binary <code>+</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Conversions are performed BEFORE the addition</span></div><div class="line"><span class="built_in">console</span>.log(+<span class="string">'41'</span> + +<span class="literal">true</span>); <span class="comment">// 42</span></div></pre></td></tr></table></figure>
<h3 id="Operator-associativity"><a href="#Operator-associativity" class="headerlink" title="Operator associativity"></a>Operator associativity</h3><p>Unfortunately, operator precedence cannot determine the “absolute” order of all operations. An operation can contain several operators that have the same precedence, so we need a clear direction (“left-to-right” or “right-to-left”).</p>
<p>In math, we know that the order does not really matter to perform an addition:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">1000</span> + <span class="number">300</span> + <span class="number">37</span>); <span class="comment">// 1337</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">300</span> + <span class="number">1000</span> + <span class="number">37</span>); <span class="comment">// 1337</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">37</span> + <span class="number">300</span> + <span class="number">1000</span>); <span class="comment">// 1337</span></div></pre></td></tr></table></figure>
<p>But it is much more problematic with subtraction:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">100</span> - <span class="number">58</span>); <span class="comment">// 42</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">58</span> - <span class="number">100</span>); <span class="comment">// -42</span></div></pre></td></tr></table></figure>
<p>An interesting point is that the unary <code>+</code> has “right-to-left” associativity, whereas the binary <code>+</code> has “left-to-right” associativity.</p>
<p>Again, the full <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table" target="_blank" rel="external">reference of operator associativity</a> is available on MDN. We could also bring back the previous example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Conversions are performed right-to-left</span></div><div class="line"><span class="comment">// The addition is performed left-to-right</span></div><div class="line"><span class="built_in">console</span>.log(+<span class="string">'41'</span> + +<span class="literal">true</span>); <span class="comment">// 42</span></div></pre></td></tr></table></figure>
<h2 id="Bracket-notation"><a href="#Bracket-notation" class="headerlink" title="Bracket notation"></a>Bracket notation</h2><p>In JavaScript, all objects have <strong>own</strong> and/or <strong>prototype</strong> properties. These properties can be accessed using the <strong>dot</strong> (<code>.</code>) notation or the <strong>bracket</strong> notation (<code>[]</code>). JSFuck uses bracket notation, which must not be confused with empty arrays…</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">foo</span>: <span class="string">'Foo'</span>&#125;.foo); <span class="comment">// Foo</span></div><div class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">foo</span>: <span class="string">'Foo'</span>&#125;[<span class="string">'foo'</span>]); <span class="comment">// Foo</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log([].length); <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log([][<span class="string">'length'</span>]); <span class="comment">// 0</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="regexp">/abc/g</span>.flags); <span class="comment">// g</span></div><div class="line"><span class="built_in">console</span>.log(<span class="regexp">/abc/g</span>[<span class="string">'flags'</span>]); <span class="comment">// g</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;.name); <span class="comment">// fn</span></div><div class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;[<span class="string">'name'</span>]); <span class="comment">// fn</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="JSFuck-basics"><a href="#JSFuck-basics" class="headerlink" title="JSFuck basics"></a>JSFuck basics</h2><p><a href="http://www.jsfuck.com/" target="_blank" rel="external">JSFuck</a> introduces itself with the following basics:</p>
<ul>
<li><strong>false</strong>       =&gt;  <code>![]</code></li>
<li><strong>true</strong>        =&gt;  <code>!![]</code></li>
<li><strong>undefined</strong>   =&gt;  <code>[][[]]</code></li>
<li><strong>NaN</strong>         =&gt;  <code>+[![]]</code></li>
<li><strong>0</strong>           =&gt;  <code>+[]</code></li>
<li><strong>1</strong>           =&gt;  <code>+!+[]</code></li>
<li><strong>2</strong>           =&gt;  <code>!+[]+!+[]</code></li>
<li><strong>10</strong>          =&gt;  <code>[+!+[]]+[+[]]</code></li>
<li><strong>Array</strong>       =&gt;  <code>[]</code></li>
<li><strong>Number</strong>      =&gt;  <code>+[]</code></li>
<li><strong>String</strong>      =&gt;  <code>[]+[]</code></li>
<li><strong>Boolean</strong>     =&gt;  <code>![]</code></li>
<li><strong>Function</strong>    =&gt;  <code>[][&quot;filter&quot;]</code></li>
<li><strong>eval</strong>        =&gt;  <code>[][&quot;filter&quot;][&quot;constructor&quot;]( CODE )()</code></li>
<li><strong>window</strong>      =&gt;  <code>[][&quot;filter&quot;][&quot;constructor&quot;](&quot;return this&quot;)()</code></li>
</ul>
<p>With what we know about <strong>type conversion/coercion</strong>, <strong>truthy/falsy values</strong>, <strong>operator precedence/associativity</strong> and <strong>bracket notation</strong>, we can know explain this mess!</p>
<h3 id="false-gt"><a href="#false-gt" class="headerlink" title="false =&gt; ![]"></a>false =&gt; <code>![]</code></h3><p><code>[]</code> is an array. JS arrays are objects and objects are always truthy. So if we negate a truthy value with a logical NOT, it becomes <code>false</code>.</p>
<h3 id="true-gt"><a href="#true-gt" class="headerlink" title="true =&gt; !![]"></a>true =&gt; <code>!![]</code></h3><p><code>![]</code> is <code>false</code>, but <code>!![]</code> is equivalent to <code>!false</code>. So it is <code>true</code>.</p>
<h3 id="undefined-gt"><a href="#undefined-gt" class="headerlink" title="undefined =&gt; [][[]]"></a>undefined =&gt; <code>[][[]]</code></h3><p><code>[]</code> is an array. Each array has built-in properties. <code>length</code> is a valid one and could be accessed like so: <code>[][&quot;length&quot;]</code>. In this case, the array is empty and returns <code>0</code>.</p>
<p>But in our case, <code>[]</code> or <code>&quot;&quot;</code> is not a valid property of the array, so <code>[][[]]</code> obviously returns <code>undefined</code>.</p>
<h3 id="NaN-gt"><a href="#NaN-gt" class="headerlink" title="NaN =&gt; +[![]]"></a>NaN =&gt; <code>+[![]]</code></h3><p><code>![]</code> is <code>false</code>, but <code>[false]</code> is truthy (this is an array containing a boolean). <code>[false].toString()</code> returns the string <code>&quot;false&quot;</code> and <code>+&quot;false&quot;</code> returns <code>NaN</code>.</p>
<h3 id="0-gt"><a href="#0-gt" class="headerlink" title="0 =&gt; +[]"></a>0 =&gt; <code>+[]</code></h3><p><code>[].toString()</code> gives an empty string and <code>+&quot;&quot;</code> gives <code>0</code>.</p>
<h3 id="1-gt"><a href="#1-gt" class="headerlink" title="1 =&gt; +!+[]"></a>1 =&gt; <code>+!+[]</code></h3><p><code>+[]</code> gives <code>0</code>. <code>0</code> is falsy, so <code>!0</code> gives <code>true</code>. <code>+true</code> gives <code>1</code>.</p>
<h3 id="2-gt"><a href="#2-gt" class="headerlink" title="2 =&gt; !+[]+!+[]"></a>2 =&gt; <code>!+[]+!+[]</code></h3><p><code>!+[]</code> is <code>true</code> because <code>+[]</code> is <code>0</code> and <code>0</code> is falsy (<code>!0</code> is <code>true</code>). <code>true+true</code> = <code>2</code> because booleans are coerced to numbers when evaluated in a numerical context (<code>+false</code> is <code>0</code> and <code>+true</code> is <code>1</code>).</p>
<h3 id="10-gt"><a href="#10-gt" class="headerlink" title="10 =&gt; [+!+[]]+[+[]]"></a>10 =&gt; <code>[+!+[]]+[+[]]</code></h3><p><strong>Left part:</strong> <code>+!+[]</code> = <code>1</code>, so <code>[+!+[]]</code> = <code>[1]</code>.<br><strong>Right part:</strong> <code>+[]</code> = <code>0</code>, so <code>[+[]]</code> = <code>[0]</code>.</p>
<p><strong>Concatenation:</strong><br><code>[1]+[0]</code> is equivalent to <code>[1].toString() + [0].toString()</code> and returns <code>&quot;10&quot;</code>.</p>
<h3 id="Array-gt"><a href="#Array-gt" class="headerlink" title="Array =&gt; []"></a>Array =&gt; <code>[]</code></h3><p>An array literal (better alternative to <code>new Array()</code>). <code>Array.isArray([])</code> = <code>true</code>.</p>
<h3 id="Number-gt"><a href="#Number-gt" class="headerlink" title="Number =&gt; +[]"></a>Number =&gt; <code>+[]</code></h3><p><code>+[] = 0</code> and <code>typeof +[]</code> = <code>number</code>.</p>
<h3 id="String-gt"><a href="#String-gt" class="headerlink" title="String =&gt; []+[]"></a>String =&gt; <code>[]+[]</code></h3><p><code>[]+[]</code> is equivalent to <code>[].toString() + [].toString()</code>. It is actually a concatenation of empty strings and the result is an empty string.</p>
<h3 id="Boolean-gt"><a href="#Boolean-gt" class="headerlink" title="Boolean =&gt; ![]"></a>Boolean =&gt; <code>![]</code></h3><p><code>[]</code> is truthy, <code>![]</code> is <code>false</code>.</p>
<h3 id="Function-gt-quot-filter-quot"><a href="#Function-gt-quot-filter-quot" class="headerlink" title="Function =&gt; [][&quot;filter&quot;]"></a>Function =&gt; <code>[][&quot;filter&quot;]</code></h3><p><code>[]</code> is an array (instance of <code>Array</code>) and has access to <code>Array.prototype</code> methods. We can then access <code>Array.prototype.filter</code> (which is a function) using bracket notation.</p>
<h3 id="eval-gt-quot-filter-quot-quot-constructor-quot-CODE"><a href="#eval-gt-quot-filter-quot-quot-constructor-quot-CODE" class="headerlink" title="eval =&gt; [][&quot;filter&quot;][&quot;constructor&quot;]( CODE )()"></a>eval =&gt; <code>[][&quot;filter&quot;][&quot;constructor&quot;]( CODE )()</code></h3><p><code>[][&quot;filter&quot;]</code> is a function. In JavaScript, each function is an instance of <code>Function</code> and has access to <code>Function.prototype</code> properties. <code>Function.prototype.constructor</code> is one of these properties (this one is actually a reference to <code>Function</code>). Thus, <code>[][&quot;filter&quot;][&quot;constructor&quot;]</code> is an equivalent of <code>Function</code>. With or without <code>new</code>, <code>Function()</code> returns a new function. We could then make a simple addition like so:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a + b'</span>)(<span class="number">3</span>, <span class="number">7</span>) <span class="comment">// returns 10</span></div></pre></td></tr></table></figure>
<h3 id="window-gt-quot-filter-quot-quot-constructor-quot-quot-return-this-quot"><a href="#window-gt-quot-filter-quot-quot-constructor-quot-quot-return-this-quot" class="headerlink" title="window =&gt; [][&quot;filter&quot;][&quot;constructor&quot;](&quot;return this&quot;)()"></a>window =&gt; <code>[][&quot;filter&quot;][&quot;constructor&quot;](&quot;return this&quot;)()</code></h3><p><code>[][&quot;filter&quot;][&quot;constructor&quot;]</code> is <code>Function</code>. When the code is not in <em>strict mode</em>, <code>this</code> is generally <code>window</code> in regular functions. Here is an example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// window</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo();</div></pre></td></tr></table></figure>
<p>For the record, this result would be <code>undefined</code> in strict mode:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// undefined</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo();</div></pre></td></tr></table></figure>
<p>It could also be written like this:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">[][<span class="string">"filter"</span>][<span class="string">"constructor"</span>](<span class="string">"'use strict'; console.log(this);"</span>)()</div></pre></td></tr></table></figure>
<hr>
<h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><p>Try to decrypt the following code. Don’t cheat, if you can… :P</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+([][[]]+[])[!+[]+!+[]]</div></pre></td></tr></table></figure>
<h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><ul>
<li>Identify the main operands</li>
<li>Break it into small pieces</li>
<li>The result is a string</li>
</ul>
<p>Good luck!</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(!![]+[]) =&gt; (true+[]) =&gt; (&quot;true&quot;+&quot;&quot;) =&gt; (&quot;true&quot;) =&gt; &quot;true&quot;</div><div class="line">[!+[]+!+[]+!+[]] =&gt; [!0+!0+!0] =&gt; [true+true+true] =&gt; [1+1+1] =&gt; [3]</div><div class="line"></div><div class="line">+</div><div class="line"></div><div class="line">([][[]]+[]) =&gt; (undefined+[]) =&gt; (&quot;undefined&quot;+&quot;&quot;) =&gt; &quot;undefined&quot;</div><div class="line">[+!+[]] =&gt; [+!0] =&gt; [+true] =&gt; [1]</div><div class="line"></div><div class="line">+</div><div class="line"></div><div class="line">([][[]]+[]) =&gt; (undefined+[]) =&gt; (&quot;undefined&quot;+&quot;&quot;) =&gt; &quot;undefined&quot;</div><div class="line">[!+[]+!+[]] =&gt; [!0+!0] =&gt; [true+true] =&gt; [1+1] =&gt; [2]</div><div class="line"></div><div class="line">= &quot;true&quot;[3]+&quot;undefined&quot;[1]+&quot;undefined&quot;[2]</div><div class="line">= &quot;e&quot;+&quot;n&quot;+&quot;d&quot;</div><div class="line">= &quot;end&quot;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;JavaScript: The Good Parts&lt;/em&gt; readers and &lt;strong&gt;Douglas Crockford&lt;/strong&gt; fans know that JavaScript subsets matter. Due to the permissive and versatile nature of the language, it is reasonable to select only the most solid stones to build a wall. But hey, why would we need to bother with a full programming language when we just need 6 characters? Here comes &lt;a href=&quot;http://www.jsfuck.com/&quot;&gt;&lt;strong&gt;JSFuck&lt;/strong&gt;&lt;/a&gt; by &lt;strong&gt;Martin Kleppe&lt;/strong&gt;…&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://badacadabra.github.io/categories/JavaScript/"/>
    
    
      <category term="ES5" scheme="https://badacadabra.github.io/tags/ES5/"/>
    
      <category term="JSFuck" scheme="https://badacadabra.github.io/tags/JSFuck/"/>
    
  </entry>
  
</feed>
